import streamlit as st 
import time 
from datetime import datetime 
import random 
import hashlib
st.markdown(
    """
    <a href="http://localhost:5000" target="_blank" style="text-decoration:none;">
        <div style="
            display: inline-block;
            padding: 10px 20px;
            background-color: #007bff;
            color: white;
            text-align: center;
            border-radius: 5px;
            cursor: pointer;
        ">
            Home
        </div>
    </a>
    """,
    unsafe_allow_html=True
)
# プログレス制御用の変数を追加
nmap_progress = 0
exploit_progress = 0

def display_ascii_art(art_type):
    if art_type == "target":
        return """
╔═══════════════════╗
║ Metasploitable2 ║
║ 192.168.1.100 ║
╚═══════════════════╝
"""
    elif art_type == "attacker":
        return """
╔═══════════════════╗
║ Attacker Machine ║
║ 192.168.1.10 ║
╚═══════════════════╝
"""
    elif art_type == "transfer":
        return """
-----> * -----> * -----> データ転送中...
<----- * <----- * <-----
"""

def simulate_typing(text):
    placeholder = st.empty()
    displayed_text = ""
    for char in text:
        displayed_text += char
        placeholder.text(displayed_text)
        time.sleep(0.05)
    return placeholder

def manual_pentest():
    global nmap_progress, exploit_progress
    st.subheader("手動ペネトレーションテスト")
    
    col1, col2 = st.columns(2)
    with col1:
        st.text(display_ascii_art("attacker"))
    with col2:
        st.text(display_ascii_art("target"))

    # Step 1: IPアドレススキャン
    st.write("Step 1: 対象システムの調査")
    st.code("入力するコマンド: nmap -sV 192.168.1.100")
    nmap_input = st.text_input("コマンドを入力してください:", key="nmap")
    
    if nmap_input:
        if nmap_input.lower() != "nmap -sv 192.168.1.100":
            st.error("正確に 'nmap -sV 192.168.1.100' と入力してください")
        elif 'nmap_executed' not in st.session_state:
            status_text = st.empty()
            if 'count' not in st.session_state:
                st.session_state["count"] = 0
                if(st.session_state["count"]==0):
                    for i in range(100):
                        status_text.text(f"[{i+1}/100] スキャン実行中...")
                        time.sleep(0.05)
                st.session_state["count"] += 1


            st.write("スキャン完了...\n")
            st.code("""
PORT     STATE    SERVICE    VERSION
21/tcp   open    ftp        vsftpd 2.3.4
22/tcp   open    ssh        OpenSSH 4.7p1
23/tcp   open    telnet     Linux telnetd
25/tcp   open    smtp       Postfix smtpd
80/tcp   open    http       Apache httpd 2.2.8

検出された脆弱性一覧
オープンポートの露出
FTP (21/tcp)
SSH (22/tcp)
Telnet (23/tcp)
SMTP (25/tcp)
HTTP (80/tcp)
古いバージョンのサービス
vsftpd 2.3.4 (既知の脆弱性あり)
OpenSSH 4.7p1 (古いバージョン)
Apache httpd 2.2.8 (セキュリティアップデート必要)
""")
            st.session_state.step1_complete = True

    # Step 2: Metasploitの起動
    if 'step1_complete' in st.session_state:
        st.write("Step 2: Metasploitの起動")
        st.code("入力するコマンド: msfconsole")
        msf_input = st.text_input("コマンドを入力してください:", key="msf")
        if msf_input:
            if msf_input.lower() != "msfconsole":
                st.error("正確に 'msfconsole' と入力してください")
            else:
                st.code("msf6 >")
                st.session_state.step2_complete = True
    # Step 3: 攻撃モジュールの選択
    if 'step2_complete' in st.session_state:
        st.write("Step 3: 検出された脆弱性に対する攻撃モジュールの選択")
        
        # 利用可能な攻撃モジュールの定義
        exploit_modules = {
            "FTP Backdoor (vsftpd 2.3.4)": "exploit/unix/ftp/vsftpd_234_backdoor",
            "SSH Exploit (OpenSSH 4.7p1)": "exploit/unix/ssh/openssh_compat",
            "Apache HTTPd Exploit": "exploit/unix/http/apache_22_backdoor",
            "Telnet Backdoor": "exploit/unix/telnet/telnetd_exploit"
        }
        
        # プルダウンでモジュール選択
        selected_module_name = st.selectbox(
            "使用する攻撃モジュールを選択してください:",
            list(exploit_modules.keys())
        )
        
        # 選択されたモジュールのパスを取得
        selected_module = exploit_modules[selected_module_name]
        
        if selected_module:
            st.code(f"使用するコマンド: use {selected_module}")
            
            # 実行ボタン
            if st.button("モジュールを実行"):
                st.code(f"msf6 {selected_module} >")
                st.success(f"{selected_module_name}を読み込みました")
                st.session_state.step3_complete = True


    # Step 4: ターゲットの設定
    if 'step3_complete' in st.session_state:
        st.write("Step 4: ターゲットIPの設定")
        st.code("入力するコマンド: set RHOSTS 192.168.1.100")
        rhost_input = st.text_input("コマンドを入力してください:", key="rhost")
        if rhost_input:
            if rhost_input.lower() != "set rhosts 192.168.1.100":
                st.error("正確に 'set RHOSTS 192.168.1.100' と入力してください")
            else:
                st.code("RHOSTS => 192.168.1.100")
                st.session_state.step4_complete = True

    # Step 5: 攻撃実行
    if 'step4_complete' in st.session_state:
            st.write("Step 5: エクスプロイトの実行")
            st.code("入力するコマンド: run")
            run_input = st.text_input("コマンドを入力してください:", key="run")
            
            if run_input:
                if run_input.lower() not in ["exploit", "run"]:
                    st.error("'run' と入力してください")
                elif 'exploit_executed' not in st.session_state:
                    status_text = st.empty()
                    if 'count1' not in st.session_state:
                            st.session_state["count1"] = 0
                            if(st.session_state["count1"]==0):
                                for i in range(100):
                                    status_text.text(f"[{i+1}/100] 侵入処理実行中...")
                                    time.sleep(0.08)
                            st.session_state["count1"] += 1
                    
                    st.success("セッション確立成功!")
                    st.text(display_ascii_art("transfer"))
                    st.session_state.step5_complete = True
                    st.session_state.exploit_executed = True

    # Step 6: 情報収集
    if 'step5_complete' in st.session_state:
        st.write("最終Step: システム内の情報収集")
        st.code("入力するコマンド: cat /etc/passwd")
        cat_input = st.text_input("コマンドを入力してください:", key="cat")
        if cat_input:
            if cat_input.lower() != "cat /etc/passwd":
                st.error("正確に 'cat /etc/passwd' と入力してください")
            else:
                
                with st.spinner('データ取得中...'):
                    time.sleep(2)
                departments = ['営業部', '技術部', '人事部', '経理部', '企画部']
                positions = ['部長', '課長', '主任', '社員']
                personal_data = []
                for i in range(50):
                    name = f"user{i:03d}"
                    email = f"{name}@metasploitable.local"
                    dept = random.choice(departments)
                    pos = random.choice(positions)
                    salary = random.randint(300000, 800000)
                    phone = f"0{random.randint(70,90)}-{random.randint(1000,9999)}-{random.randint(1000,9999)}"
                    personal_data.append({
                        "ユーザーID": name,
                        "メールアドレス": email,
                        "部署": dept,
                        "役職": pos,
                        "給与": f"¥{salary:,}",
                        "電話番号": phone,
                        "パスワードハッシュ": hashlib.md5(name.encode()).hexdigest()
                    })
                st.write("### 🚨 取得された機密情報 🚨")
                st.table(personal_data[:10])
                with st.expander("さらに多くのユーザー情報を表示"):
                    st.table(personal_data[10:])
                st.write("### 📊 データ分析")
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("総ユーザー数", len(personal_data))
                with col2:
                    st.metric("平均給与", "¥523,450")
                with col3:
                    st.metric("脆弱なパスワード", "92%")



def auto_pentest():
    st.subheader("LLMエージェントによる自動ペネトレーションテスト")
    
    if st.button("自動テスト開始"):
        agent_thoughts = [
            "ターゲットシステムの分析を開始します...",
            "IPアドレス 192.168.1.100 に対してnmapスキャンを実行します",
            "検出された脆弱性を分析中...",
            "vsftpd 2.3.4のバックドアを発見しました",
            "最適なエクスプロイトモジュールを選択しています...",
            "exploit/unix/ftp/vsftpd_234_backdoor を使用します",
            "ペイロードを準備しています...",
            "システムへの侵入を試みています..."
        ]

        for thought in agent_thoughts:
            st.write("🤖 Agent思考: " + thought)
            st.text(display_ascii_art("transfer"))
            time.sleep(2)

        st.success("システムへのアクセスに成功しました")
        
        personal_info = {
            "ユーザー名": ["yamada_taro", "suzuki_hanako", "tanaka_ichiro"],
            "メールアドレス": ["yamada@example.com", "suzuki@example.com", "tanaka@example.com"],
            "パスワードハッシュ": ["5f4dcc3b5aa765d61d8327deb882cf99", "e99a18c428cb38d5f260853678922e03", "6eea9b7ef19179a06954edd0f6c05ceb"]
        }
        
        st.write("取得された個人情報:")
        st.table(personal_info)

def main():
    st.title("Metasploitable2 ペネトレーションテスト体験")
    st.write("セキュリティ学習用環境でのペネトレーションテスト体験")

    tab1, tab2 = st.tabs(["手動実行", "自動実行"])
    
    with tab1:
        manual_pentest()
    with tab2:
        auto_pentest()

if __name__ == "__main__":
    main()
